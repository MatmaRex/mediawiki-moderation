TODO:

High-prio:
* (1.31) Fully support MobileFrontend/VisualEditor in upcoming MediaWiki 1.31.

Medium-prio:
* (feature) Intercept renaming of pages.
* (testsuite) Provide ~100% automated test coverage of all functionality.

Low-prio:
* (feature) Provide flexible handling of zero edits, for example suppress if
	there is no edit comment, mark them with "is zero edit" flag viewable
	to the moderator, add an option (disabled by default) to suppress
	zero edits completely, etc.
* (interface) For non-automoderated users: show a message on their
	Special:Contributions ensuring them that their edits will
	appear there when they are approved.
* (interface) Perform the actions like Approve via Ajax (without leaving Special:Moderation).
	Partially implemented ($wgModerationUseAjax), but we need some feedback
	from users on UX (is it convenient to use or not?)
* (testsuite) Troubleshoot session-related issues in "Internal invocation" mode.
	Currently preload-related tests don't succeed in this mode,
	because PHP session is not properly preserved before/after pcntl_fork().
* (feature) Special page to list users blocked via "Mark as spammer".
* (feature) modaction=promote for quickly assigning "automoderated" flag.
* (testsuite) Investigate some tests being flaky under PHP-FPM (but not mod_php).
* (performance) Optimize modaction=approveall by merging the UPDATE queries
	in ApproveHook::onRecentChange_save().

Background-prio (may not be needed):
* (meta) Display notification "Please run update.php" on Special:Moderation if
some new feature (that requires DB update) is disabled because it wasn't done.
* (feature) Show "rejected edits" link to moderators on Special:Contributions.
* (feature) Should ApproveHook update timestamp of upload/move logs?
* (feature) Show "you have N pending edits" link to non-automoderated users,
so that they would know to which pages to return to continue editing?

Tests needed:
* API: api.php?action=moderation
* PageForms plugin (preload, "continue editing" link in postedit notification)

FIXME:
* ApproveHook shouldn't set rev_timestamp of newly approved edit to be earlier
	than timestamp of the latest revision, because Page History is sorted
	by rev_timestamp and would show these two revisions in the wrong order.
